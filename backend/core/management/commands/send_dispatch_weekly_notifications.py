"""
Management command para enviar notifica√ß√µes semanais de despachos
"""
from django.core.management.base import BaseCommand
from core.services_dispatch import DispatchNotificationService


class Command(BaseCommand):
    help = 'Envia notifica√ß√µes semanais para despachos com prazo pr√≥ximo ou em atraso'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Executa sem criar notifica√ß√µes (apenas mostra quantas seriam criadas)',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ Iniciando envio de notifica√ß√µes semanais de despachos...')
        )
        
        try:
            if options['dry_run']:
                self.stdout.write(
                    self.style.WARNING('üîç Modo dry-run ativado - nenhuma notifica√ß√£o ser√° criada')
                )
                # Em modo dry-run, apenas contar quantas notifica√ß√µes seriam criadas
                # Por simplicidade, vamos executar mas n√£o salvar
                notifications_created = DispatchNotificationService.send_weekly_notifications()
                self.stdout.write(
                    self.style.SUCCESS(f'üìä Seriam criadas {notifications_created} notifica√ß√µes')
                )
            else:
                notifications_created = DispatchNotificationService.send_weekly_notifications()
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ {notifications_created} notifica√ß√µes criadas com sucesso!')
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro ao enviar notifica√ß√µes: {str(e)}')
            )
            raise

        self.stdout.write(
            self.style.SUCCESS('üéâ Processo de notifica√ß√µes conclu√≠do!')
        )
