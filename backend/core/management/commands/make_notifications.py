"""
Management command para gerar notifica√ß√µes de obriga√ß√µes.

Executa:
- Verifica√ß√£o de obriga√ß√µes pr√≥ximas do vencimento (3 dias)
- Verifica√ß√£o de obriga√ß√µes em atraso

Uso:
    python manage.py make_notifications
    python manage.py make_notifications --days-ahead 7

Recomendado executar diariamente via cron/task scheduler.
"""

from django.core.management.base import BaseCommand
from django.utils import timezone
from core.services import NotificationService


class Command(BaseCommand):
    help = 'Gera notifica√ß√µes de obriga√ß√µes pr√≥ximas do vencimento e em atraso'

    def add_arguments(self, parser):
        parser.add_argument(
            '--days-ahead',
            type=int,
            default=3,
            help='N√∫mero de dias √† frente para verificar vencimentos (padr√£o: 3)'
        )

    def handle(self, *args, **options):
        days_ahead = options['days_ahead']
        
        self.stdout.write(self.style.NOTICE(f'\nüîî Iniciando gera√ß√£o de notifica√ß√µes...'))
        self.stdout.write(self.style.NOTICE(f'Data/Hora: {timezone.now().strftime("%d/%m/%Y %H:%M:%S")}'))
        self.stdout.write(self.style.NOTICE(f'Verificando vencimentos nos pr√≥ximos {days_ahead} dias\n'))
        
        try:
            # 1. Verificar obriga√ß√µes pr√≥ximas do vencimento
            self.stdout.write('üìÖ Verificando obriga√ß√µes pr√≥ximas do vencimento...')
            due_soon_count = NotificationService.check_due_dates(days_ahead=days_ahead)
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ {due_soon_count} notifica√ß√£o(√µes) de vencimento pr√≥ximo criada(s)')
            )
            
            # 2. Verificar obriga√ß√µes em atraso
            self.stdout.write('\n‚è∞ Verificando obriga√ß√µes em atraso...')
            overdue_count = NotificationService.check_overdue_obligations()
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ {overdue_count} notifica√ß√£o(√µes) de atraso criada(s)')
            )
            
            # Resumo final
            total = due_soon_count + overdue_count
            self.stdout.write('\n' + '='*60)
            self.stdout.write(
                self.style.SUCCESS(f'‚ú® RESUMO: {total} notifica√ß√£o(√µes) criada(s) no total')
            )
            self.stdout.write('='*60 + '\n')
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'\n‚ùå Erro ao gerar notifica√ß√µes: {str(e)}')
            )
            raise e

